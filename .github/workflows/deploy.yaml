name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Determine changed directory
        id: check_changes
        run: |
          api_changes=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^api/' || true)
          client_changes=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^client/' || true)

          if [[ -n "$api_changes" ]] || [[ -n "$client_changes" ]]
            if [[ -n "$api_changes" ]]; then
              echo "::set-output name=changed_dir::api"
            if [[ -n "$client_changes" ]]; then
              echo "::set-output name=changed_dir::client"
          else
            echo "No changes in 'api/' or 'client/' directory."
          fi

      - name: Build and push Docker images
        run: |
          if [[ "${{ steps.check_changes.outputs.changed_dir }}" == "api/" ]] || [[ "${{ steps.check_changes.outputs.changed_dir }}" == "client/" ]]
            if [[ "${{ steps.check_changes.outputs.changed_dir }}" == "api/" ]]; then
              docker build -t stay-spotter-api ./api
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker push stay-spotter-api
            if [[ "${{ steps.check_changes.outputs.changed_dir }}" == "client/" ]]; then
              docker build -t stay-spotter-client ./client
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker push stay-spotter-client
          else
            echo "No changes in 'api/' or 'client/' directory."
          fi
  
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: ${{ needs.build-and-push-images.outputs.changed_dir == 'api' || needs.build-and-push-images.outputs.changed_dir == 'client' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: ssh ec2-user@${{ secrets.EC2_INSTANCE_IP }} 'bash -s' < deploy.sh
